// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.dagger2demo;

import dagger.MembersInjector;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerTestComponent implements TestComponent {
  private Provider<IView> provideViewProvider;

  private Provider<TestPresent> testPresentProvider;

  private MembersInjector<Mian1Activity> mian1ActivityMembersInjector;

  private DaggerTestComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideViewProvider = TestModule_ProvideViewFactory.create(builder.testModule);

    this.testPresentProvider = TestPresent_Factory.create(provideViewProvider);

    this.mian1ActivityMembersInjector = Mian1Activity_MembersInjector.create(testPresentProvider);
  }

  @Override
  public void inject(Mian1Activity mian1Activity) {
    mian1ActivityMembersInjector.injectMembers(mian1Activity);
  }

  public static final class Builder {
    private TestModule testModule;

    private Builder() {}

    public TestComponent build() {
      if (testModule == null) {
        throw new IllegalStateException(TestModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerTestComponent(this);
    }

    public Builder testModule(TestModule testModule) {
      this.testModule = Preconditions.checkNotNull(testModule);
      return this;
    }
  }
}
